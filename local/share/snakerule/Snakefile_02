PRJ_ROOT='/scratch/trcanmed/connector'
SRC_DIR=PRJ_ROOT+'/local/src'
DATA=PRJ_ROOT+'/local/share/data/2023_eacr_data'

#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_cetuxi_egrassi-2023-04-18125946.523064.las | tr "\t" "\n" | grep -n 'Start date_0'
#510:T:Treatments - Start date_0
#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_irinovol_egrassi-2023-04-18161714.552060.las | tr "\t" "\n" | grep -n 'Start date_0'
#190:T:Treatments - Start date_0
#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_irinovol_egrassi-2023-04-18161714.552060.las | tr "\t" "\n" | grep -n 'End date_0'
#192:T:Treatments - End date_0
#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_cetuxi_egrassi-2023-04-18125946.523064.las | tr "\t" "\n" | grep -n 'End date_0'
#512:T:Treatments - End date_0
#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_placebo3w_egrassi-2023-04-27130104.693708.las | tr "\t" "\n" | grep -n 'End date_0'
#312:T:Treatments - End date_0
#egrassi@godot:/scratch/trcanmed/connector/local/share/data/2023_eacr_data$ head -n1  alan_query_placebo3w_egrassi-2023-04-27130104.693708.las | tr "\t" "\n" | grep -n 'Start date_0'
#310:T:Treatments - Start date_0


START_DATE_I = {
    'cetuxi': 509,
    'irino': 189,
    'placebo3w': 309
}
END_DATE_I = {
    'cetuxi': 511,
    'irino': 191,
    'placebo3w': 311
}
DATE='2023-04-18'

rule preprocess:
    input: DATA+'/egrassi-'+DATE+ '_{arm}.las'
    output: '{arm}_long.tsv.gz'
    params: tool=SRC_DIR+'/process_las_removeNoneDate.pl', starti= lambda w: START_DATE_I[w.arm], endi=lambda w: END_DATE_I[w.arm]
    log: '{arm}_long.tsv.gz.log'
    shell:
        """
            cat {input} | {params.tool} {params.starti} {params.endi} 2> {log} | gzip > {output}
        """

rule identify_new_expg:
    input: new="cetuxi_long.tsv.gz", old="../01/cetuxi6w_long.tsv.gz"
    output: "newexpg_cetuxi_long.tsv.gz"
    shell: 
        """
            zcat {input.new} | filter_1col -v 2 <(zcat {input.old} | cut -f 2) | gzip > {output}
        """

rule identify_new_longgen:
    input: new="cetuxi_long.tsv.gz", old="../01/cetuxi6w_long.tsv.gz"
    output: "newlonggen_cetuxi_long.tsv.gz"
    shell: 
        """
            zcat {input.new} | filter_1col -v 1 <(zcat {input.old} | cut -f 1) | gzip > {output}
        """

rule identify_new_model:
    input: new="cetuxi_long.tsv.gz", old="../01/cetuxi6w_long.tsv.gz"
    output: "newmodel_cetuxi_long.tsv.gz"
    shell: 
        """
            zcat {input.new} | bawk '{{print substr($1,0,7), $0}}' | filter_1col -v 1 <(zcat {input.old} | bawk '{{print substr($1,0,7)}}') | gzip > {output}
        """

# Checked with Eugy, the corresponding genealogy from acute after placebo should be fixed with the filter on None dates, to be super sure let's
# remove these genealogy that are present both in cetuxi and placebo
rule filter_matching_lgen_placebo:
    input: cet="newexpg_cetuxi_long.tsv.gz", placebo="placebo3w_long.tsv.gz"
    output: "newexpg_pruned_cetuxi_long.tsv.gz"
    shell:
        """
            zcat {input.cet} | filter_1col -v 1 <(zcat {input.placebo} | cut -f 1 |sort | uniq) | gzip > {output}
        """


# without grep CRC there are issues in some HNC and other entries with some empty fields:
#Use of uninitialized value within @line in string ne at /home/data/Dropbox/work/velocity/process_las_placebo_removeNoneDate.pl line 39, <STDIN> line 795.

rule expg:
    input: "{arm}_long.tsv.gz"
    output: "{arm}_expg"
    shell:  
        """
            zcat {input} | cut -f 2 |sort | uniq > {output}
        """

rule lgenealogy:
    input: "{arm}_long.tsv.gz"
    output: "{arm}_longen"
    shell:  
        """
            zcat {input} | cut -f 1 |sort | uniq > {output}
        """

rule genealogy:
    input: "{arm}_long.tsv.gz"
    output: "{arm}_gen"
    shell:  
        """
            zcat {input} | bawk '{{print substr($1,0,7)}}' |sort | uniq > {output}
        """

rule endprocess:
    input: data="{arm}_long.tsv.gz"
    output: "{arm}_long_header.tsv.gz"
    shell:
        """
            echo -e "longen\\texp_group\\tstart_date\\tend_date\\tmeasure_date\\tvolume" > {output}.tmp
            zcat {input.data} >> {output}.tmp
            gzip -c {output}.tmp > {output}
            rm {output}.tmp
        """

rule want_genetic:
    input: ce="cetuxi6w_long_header.tsv.gz", pla="placebo_long_header.tsv.gz"
    output: "wanted_sgen"
    shell:
        """
            zcat {input.ce} | sed 1d | bawk '{{print substr($1,0,7)}}' > {output}.tmp
            zcat {input.pla} | sed 1d | bawk '{{print substr($1,0,7)}}' >> {output}.tmp
            cat {output}.tmp | sort | uniq > {output}
            rm {output}.tmp
        """

rule preprocess_mut:
    input: data="dtb_mutations_point.txt", filter="wanted_sgen"
    output: "dtb_snv.txt"
    shell:
        """
            cat {input.data} | filter_1col 1 <(cat <(echo 'sgen') {input.filter}) > {output}
        """

rule preprocess_ampdel:
    input: data="dtb_mutations_ampdel.txt", filter="wanted_sgen"
    output: "dtb_ampdel.txt"
    shell:
        """
            cat {input.data} | filter_1col 1 <(cat <(echo 'sgen') {input.filter}) | sed 's/\\t-\\-/\\t\\t/g' | sed 's/\\t-$/\\t/1' \
            | perl -ane 'if ($F[1] ne "") {{ if ($F[1] >= 3) {{$F[1] = "amp";}} else {{ $F[1]="wt"}} }} if ($F[2] ne "") {{ if ($F[2] >= 3) {{$F[2] = "amp";}}  else {{ $F[2] = "wt"}}  }} if ($F[3] ne "")  {{  if ($F[3] >= 3) {{$F[3] = "amp";}}  else {{$F[3]="wt" }} }} print join("\\t", @F); print "\n"' > {output}
        """

rule endmut:
    input: cn="dtb_ampdel.txt", snv="dtb_snv.txt"
    output: "genetic_annotation.tsv"
    shell:
        """
           join -t $'\\t' <(head -n 1 {input.snv}) <(echo -e "sgen\\tMET\\tEGFR\\tHER2") > {output}
           join -t $'\\t' <(sed 1d {input.snv} | sort -k1,1) <(sed 1d {input.cn} | sort -k1,1) >> {output}  
        """

# manual removal of duplicates TODO in gnumeric  :(
#data@rotpunkt:~/work/stash/velocity/new$ cut -f 1 genetic_annotation.tsv |sort | uniq -d
#CRC1063
#CRC1144
#CRC1169
#CRC1182
#CRC1331
#CRC1599

#### rule re-mut:
rule keepLm:
    input: "dtb_mutations_vlookupAndrea_expandedPRLM.tsv"
    output: "dtb_mutations_april2021_LM.tsv"
    shell: 
        """
            bawk '$2=="LM" || $2=="" || NR==1 {{print $1,$4,$5,$6,$7}}' {input} > {output}
        """

rule new_muts_filtered:
    input: data="dtb_mutations_april2021_LM.tsv", filter="wanted_sgen"
    output: "dtb_snv_april2021_velocity.tsv"
    shell:
        """
            head -n1 {input.data} > {output}
            filter_1col 1 {input.filter} < {input.data} >> {output}
        """

rule add_na:
    input: data="dtb_snv_april2021_velocity.tsv", filter="wanted_sgen"
    output: "dtb_snv_april2021_velocity_all.tsv"
    shell:
        """ 
            cat {input.data} > {output}
            filter_1col -v 1  <(cut -f 1 {input.data}) < {input.filter} | bawk '{{print $1,"NA","NA","NA","NA"}}' >> {output} 
        """
# Fix NA by hand to restore the few PR

#data@rotpunkt:~/work/stash/velocity/new$ filter_1col -v 1  <(cut -f 1 dtb_snv_april2021_velocity.tsv) < wanted_sgen 
#CRC0714
#CRC1320
#CRC1340
#CRC1462
#CRC1772

rule new_amp_filtered:
    input: data="dtb_mutations_amplifications_removedpairs2.tsv", filter="wanted_sgen"
    output: "dtb_cn_april2021_velocity.tsv"
    shell:
        """
            head -n1 {input.data} > {output}
            filter_1col 1 {input.filter} < {input.data} >> {output}
        """

# rule add_na:
#     input: data="dtb_snv_april2021_velocity.tsv", filter="wanted_sgen"
#     output: "dtb_snv_april2021_velocity_all.tsv"
#     shell:
#         """ 
#             cat {input.data} > {output}
#             filter_1col -v 1  <(cut -f 1 {input.data}) < {input.filter} | bawk '{{print $1,"NA","NA","NA","NA"}}' >> {output} 
#         """

rule amp_filtered_correct:
    input: data='/scratch/trcanmed/pdxopedia/dataset/misc_annots/binarized_cn.tsv',  filter="wanted_sgen"
    output: "dtb_cn_feb2022_velocity.tsv"
    shell:
        """
            head -n1 {input.data} | bawk '{{print "CASE", $1, $2, $3}}' > {output}
            filter_1col 1 {input.filter} < {input.data} | sed 's/FALSE/wt/g' | sed 's/TRUE/ampl/g' >> {output}
        """
